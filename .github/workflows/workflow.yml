name: Build and Push to ECR

# Trigger the workflow on push to main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Environment variables
env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: ecs-cicd-lab-dev-java-app
  IMAGE_TAG: latest

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    # Required permissions for OIDC
    permissions:
      id-token: write
      contents: read

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Java 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # Step 3: Run tests
      - name: Run tests
        run: mvn test --batch-mode --fail-at-end

      # Step 4: Build application
      - name: Build application
        run: mvn clean package -DskipTests=true --batch-mode

      # Step 5: Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecs-cicd-lab-dev-github-actions-role
          role-session-name: GitHubActionsSession
          aws-region: ${{ env.AWS_REGION }}

      # Step 6: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 7: Build Docker image
      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
          
          echo "Docker images built successfully:"
          docker images | grep $ECR_REPOSITORY

      # Step 8: Run security scan on Docker image (optional but recommended)
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      # Step 9: Push Docker images to ECR
      - name: Push Docker images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "Pushing Docker images to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          
          echo "Images pushed successfully:"
          echo "Latest: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "SHA: $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}"

      # Step 10: Output image details
      - name: Output image details
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "::notice::Docker image pushed to ECR"
          echo "::notice::Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "::notice::Image SHA: $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}"
          
          # Create image details file for potential use in subsequent jobs
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_SHA_URI=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" >> $GITHUB_OUTPUT

      # Step 11: Clean up local Docker images to save space
      - name: Clean up
        if: always()
        run: |
          docker system prune -f
          docker image prune -af

  # Optional: Deploy job (if you want to trigger deployment from GitHub)
  deploy:
    name: Trigger Deployment
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecs-cicd-lab-dev-github-actions-role
          role-session-name: GitHubActionsDeploySession
          aws-region: ${{ env.AWS_REGION }}

      # Optional: Manually trigger CodePipeline (EventBridge will do this automatically)
      - name: Trigger CodePipeline
        run: |
          echo "Image pushed to ECR. EventBridge will automatically trigger CodePipeline."
          echo "Pipeline: ecs-cicd-lab-dev-pipeline"
          
          # Optional: You can manually start the pipeline here if needed
          # aws codepipeline start-pipeline-execution --name ecs-cicd-lab-dev-pipeline
